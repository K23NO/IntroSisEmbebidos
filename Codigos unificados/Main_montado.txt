// Función principal
int main() {
    CyGlobalIntEnable;

    // Variables para el cálculo del flujo
    float flowRate = 0.0;
    char uartBuffer[64];
    uint32 debugCounter = 0;
    uint32 lastPulseCount = 0;
    
    // Inicializar componentes
    I2C_1_Start();
    UART_1_Start();
    initSystemTick();
    spo2_init();  // Inicializar buffer SpO2
    CyDelay(2000);
    // Configurar y habilitar la interrupción del pin del sensor
    FlowSensor_ISR_StartEx(FlowSensor_ISR);
    // Configurar y habilitar la interrupción del timer
    Timer_ISR_StartEx(Timer_ISR);

    // Mensaje de iniclizacion 
    sendString("\r\n=== Sistema de Monitorizacion de Salud ===\r\n");
    
    if (!checkSensor()) {
        sendString("Error: Sensor no detectado. Verifique conexiones.\r\n");
        while(1);
    }
    
    if (!configureSensor()) {
        sendString("Error: Configuracion fallida. Reinicie el sistema.\r\n");
        while(1);
    }
    
    sendString("Sensor configurado. Coloque el dedo...\r\n");
    // Mensaje inicial
    sprintf(uartBuffer, "Espirometro con sensor YF-S401 iniciado\r\n");
    UART_1_PutString(uartBuffer);

    // Mensaje de debug inicial
    sprintf(uartBuffer, "Iniciando mediciones... Estado pin: %d\r\n", FlowSensor_Pin_Read());
    UART_1_PutString(uartBuffer);
    // Test del timer - enviar mensaje cada 2 segundos sin usar measurementReady
    uint32 timeCounter = 0;

    while(1) {
        uint32_t red, ir;
        uint8_t samples = getFIFOSamples();
        
        if (samples > 0) {
            if (readFIFOData(&red, &ir)) {
                updateBuffers(red, ir);
                
                if (fingerDetected) {
                    // Procesar cada 100 muestras (1 segundo a 100Hz)
                    if (bufferIndex % 100 == 0) {
                        calculateHeartRate();
                        //spo2_calculate();
                        estimateBloodPressure();
                        
                         if (spo2Buffer.count >= 25) {
                            spo2_calculate();
                    // Solo mostrar cada segundo
                            static uint8_t spo2Counter = 0;
                            if (++spo2Counter >= 4) {
                                spo2Counter = 0;
                                sprintf(uartBuffer, "SpO2: %d%%\r\n", (int)spO2);
                                sendString(uartBuffer);
                                }
                            }
                        
                        
                        // Enviar resultados por UART
                        sprintf(uartBuffer, "HR:%d | BP:%d/%d\r\n", 
                                heartRate, systolicBP, diastolicBP);
                        sendString(uartBuffer);
                    }
                } else {
                    if (bufferIndex % 50 == 0) {
                        sendString("Coloque el dedo en el sensor...\r\n");
                    }
                }
            }
        }

        if(measurementReady)
        {
            // Deshabilitar interrupciones temporalmente para leer pulseCount
            CyGlobalIntDisable;
            uint32 currentPulseCount = pulseCount;
            pulseCount = 0; // Resetear contador para la próxima medición
            measurementReady = 0;
            CyGlobalIntEnable;
            
            // Calcular flujo de aire usando aritmética entera
            // Fórmula: flowRate = (pulseCount / 7.5) * 0.85 = (pulseCount * 85) / 750
            uint32 flowRate_x100 = (currentPulseCount * 85) / 75; // x100 para 2 decimales
            
            // Formatear y enviar datos por UART
            sprintf(uartBuffer, "Flujo: %lu.%02lu L/min, Pulsos/seg: %lu\r\n", 
                    flowRate_x100/100, flowRate_x100%100, currentPulseCount);
            UART_1_PutString(uartBuffer);
            
            // También enviar en formato CSV para fácil procesamiento
            sprintf(uartBuffer, "DATA,%lu.%02lu,%lu\r\n", 
                    flowRate_x100/100, flowRate_x100%100, currentPulseCount);
            UART_1_PutString(uartBuffer);
        }
        // Test simple del timer usando delay (solo para debug)
        CyDelay(2000); // 2 segundos
        timeCounter++;
        
        // Leer pulseCount de forma segura (solo para debug)
        CyGlobalIntDisable;
        uint32 currentPulseCount = pulseCount;
        CyGlobalIntEnable;

        // Debug: mostrar estado cada 2 segundos
        sprintf(uartBuffer, "DEBUG %lu: Pin=%d, Pulsos=%lu, Delta=%lu\r\n", 
                timeCounter, FlowSensor_Pin_Read(), currentPulseCount, 
                currentPulseCount - lastPulseCount);
        UART_1_PutString(uartBuffer);
        
        lastPulseCount = currentPulseCount;
        
        // Calcular y mostrar flujo si hay pulsos (debug)
        if(currentPulseCount > 0)
        {
            // Usar aritmética entera para evitar problemas con float
            // Fórmula: flowRate = (pulseCount / 7.5) * 0.85
            // Reorganizado: flowRate = (pulseCount * 0.85) / 7.5
            // Más seguro: flowRate = (pulseCount * 85) / (75 * 10) = (pulseCount * 85) / 750
            
            uint32 totalFlowRate_x100 = (currentPulseCount * 85) / 75; // x100 para 2 decimales
            uint32 deltaFlowRate_x100 = ((currentPulseCount - lastPulseCount) * 85) / 75;
            
            sprintf(uartBuffer, "FLUJO Total: %lu.%02lu L/min, Instantaneo: %lu.%02lu L/min\r\n", 
                    totalFlowRate_x100/100, totalFlowRate_x100%100,
                    deltaFlowRate_x100/100, deltaFlowRate_x100%100);
            UART_1_PutString(uartBuffer);
        }
        CyDelay(10);
    }
}