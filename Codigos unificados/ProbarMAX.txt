#include "project.h"
#include <stdio.h>

// Dirección I2C del MAX30102
#define MAX30102_ADDRESS    0x57

// Registros principales
#define REG_FIFO_WR_PTR     0x04
#define REG_OVF_COUNTER     0x05
#define REG_FIFO_RD_PTR     0x06
#define REG_FIFO_DATA       0x07
#define REG_FIFO_CONFIG     0x08
#define REG_MODE_CONFIG     0x09
#define REG_SPO2_CONFIG     0x0A
#define REG_LED1_PA         0x0C  // LED Rojo
#define REG_LED2_PA         0x0D  // LED IR
#define REG_PART_ID         0xFF

// Buffer UART
char uartBuffer[100];

// Función para enviar string por UART
void sendString(const char* str) {
    while (*str) {
        UART_1_PutChar(*str);
        str++;
    }
}

// Función mejorada para escribir registro I2C (usando método que funciona)
uint8_t writeI2C(uint8_t reg, uint8_t value) {
    uint8_t writeBuffer[2] = {reg, value};
    uint8_t status;
    
    sprintf(uartBuffer, "Escribiendo Reg:0x%02X, Val:0x%02X\r\n", reg, value);
    sendString(uartBuffer);
    
    // Limpiar errores previos
    I2C_1_MasterClearStatus();
    
    status = I2C_1_MasterWriteBuf(MAX30102_ADDRESS, writeBuffer, 2, I2C_1_MODE_COMPLETE_XFER);
    
    if (status != I2C_1_MSTR_NO_ERROR) {
        sprintf(uartBuffer, "  Error inicial: 0x%02X\r\n", status);
        sendString(uartBuffer);
        return 0;
    }
    
    // Esperar hasta que termine
    uint16_t timeout = 1000;
    while ((I2C_1_MasterStatus() & I2C_1_MSTAT_XFER_INP) && timeout--) {
        CyDelay(1);
    }
    
    if (timeout == 0) {
        sendString("  Timeout en escritura\r\n");
        return 0;
    }
    
    // Verificar errores
    uint8_t masterStatus = I2C_1_MasterStatus();
    if (masterStatus & I2C_1_MSTAT_ERR_MASK) {
        sprintf(uartBuffer, "  Error final: 0x%02X\r\n", masterStatus);
        sendString(uartBuffer);
        return 0;
    }
    
    sendString("  Escritura OK\r\n");
    return 1;
}

// Función mejorada para leer registro I2C (usando método que funciona)
uint8_t readI2C(uint8_t reg, uint8_t *value) {
    uint8_t status;
    
    sprintf(uartBuffer, "Leyendo Reg:0x%02X\r\n", reg);
    sendString(uartBuffer);
    
    // Limpiar errores previos
    I2C_1_MasterClearStatus();
    
    // Escribir registro
    status = I2C_1_MasterWriteBuf(MAX30102_ADDRESS, &reg, 1, I2C_1_MODE_NO_STOP);
    if (status != I2C_1_MSTR_NO_ERROR) {
        sprintf(uartBuffer, "  Error write: 0x%02X\r\n", status);
        sendString(uartBuffer);
        return 0;
    }
    
    // Esperar
    uint16_t timeout = 1000;
    while ((I2C_1_MasterStatus() & I2C_1_MSTAT_XFER_INP) && timeout--) {
        CyDelay(1);
    }
    
    if (timeout == 0) {
        sendString("  Timeout en write\r\n");
        return 0;
    }
    
    // Leer valor
    status = I2C_1_MasterReadBuf(MAX30102_ADDRESS, value, 1, I2C_1_MODE_COMPLETE_XFER);
    if (status != I2C_1_MSTR_NO_ERROR) {
        sprintf(uartBuffer, "  Error read: 0x%02X\r\n", status);
        sendString(uartBuffer);
        return 0;
    }
    
    // Esperar
    timeout = 1000;
    while ((I2C_1_MasterStatus() & I2C_1_MSTAT_XFER_INP) && timeout--) {
        CyDelay(1);
    }
    
    if (timeout == 0) {
        sendString("  Timeout en read\r\n");
        return 0;
    }
    
    // Verificar errores
    uint8_t masterStatus = I2C_1_MasterStatus();
    if (masterStatus & I2C_1_MSTAT_ERR_MASK) {
        sprintf(uartBuffer, "  Error final: 0x%02X\r\n", masterStatus);
        sendString(uartBuffer);
        return 0;
    }
    
    sprintf(uartBuffer, "  Valor leido: 0x%02X\r\n", *value);
    sendString(uartBuffer);
    return 1;
}

// Función para verificar que el dispositivo I2C responda
uint8_t checkI2CDevice() {
    sendString("Verificando comunicacion I2C...\r\n");
    
    // Limpiar errores previos
    I2C_1_MasterClearStatus();
    
    // Intentar escribir 0 bytes (solo verificar ACK de dirección)
    uint8_t result = I2C_1_MasterSendStart(MAX30102_ADDRESS, 0); // 0 = write
    
    if (result == I2C_1_MSTR_NO_ERROR) {
        // Esperar un poco
        CyDelay(5);
        uint8_t status = I2C_1_MasterStatus();
        
        // Enviar STOP
        I2C_1_MasterSendStop();
        
        // Verificar si hay errores
        if (status & I2C_1_MSTAT_ERR_MASK) {
            sendString("NAK - Dispositivo no responde\r\n");
            return 0;
        } else {
            sendString("ACK - Dispositivo encontrado!\r\n");
            return 1;
        }
    } else {
        sendString("ERROR en comunicacion I2C\r\n");
        return 0;
    }
}

// Función para verificar si el sensor está presente
uint8_t checkSensor() {
    uint8_t partID;
    
    sendString("Verificando sensor MAX30102...\r\n");
    
    // Primero verificar comunicación I2C básica
    if (!checkI2CDevice()) {
        sendString("Error: No hay comunicacion I2C\r\n");
        return 0;
    }
    
    // Luego intentar leer el Part ID
    if (readI2C(REG_PART_ID, &partID)) {
        sprintf(uartBuffer, "Part ID: 0x%02X\r\n", partID);
        sendString(uartBuffer);
        
        if (partID == 0x15) {
            sendString("MAX30102 detectado correctamente!\r\n");
            return 1;
        } else {
            sendString("Part ID no corresponde a MAX30102\r\n");
            return 0;
        }
    } else {
        sendString("Error: No se puede leer Part ID\r\n");
        return 0;
    }
}

// Función para configurar el sensor
uint8_t configureSensor() {
    sendString("Configurando sensor...\r\n");
    
    // 1. Reset del sensor
    if (!writeI2C(REG_MODE_CONFIG, 0x40)) {
        sendString("Error: Reset fallido\r\n");
        return 0;
    }
    CyDelay(100);
    
    // 2. Limpiar FIFO
    writeI2C(REG_FIFO_WR_PTR, 0x00);
    writeI2C(REG_OVF_COUNTER, 0x00);
    writeI2C(REG_FIFO_RD_PTR, 0x00);
    
    // 3. Configurar FIFO (promedio de 4 muestras, rollover habilitado)
    if (!writeI2C(REG_FIFO_CONFIG, 0x4F)) {
        sendString("Error: Configuracion FIFO fallida\r\n");
        return 0;
    }
    
    // 4. Configurar modo SpO2
    if (!writeI2C(REG_MODE_CONFIG, 0x03)) {
        sendString("Error: Configuracion de modo fallida\r\n");
        return 0;
    }
    
    // 5. Configurar SpO2 (ADC=4096nA, SR=100Hz, PW=411us)
    if (!writeI2C(REG_SPO2_CONFIG, 0x27)) {
        sendString("Error: Configuracion SpO2 fallida\r\n");
        return 0;
    }
    
    // 6. Configurar corriente de LEDs (24 = ~7mA)
    if (!writeI2C(REG_LED1_PA, 0x24)) {
        sendString("Error: Configuracion LED1 fallida\r\n");
        return 0;
    }
    
    if (!writeI2C(REG_LED2_PA, 0x24)) {
        sendString("Error: Configuracion LED2 fallida\r\n");
        return 0;
    }
    
    sendString("Sensor configurado correctamente!\r\n");
    return 1;
}

// Función para leer datos del FIFO
uint32_t readFIFO() {
    uint8_t buffer[3];
    uint32_t value = 0;
    
    // Leer 3 bytes del FIFO
    if (readI2C(REG_FIFO_DATA, &buffer[0]) &&
        readI2C(REG_FIFO_DATA, &buffer[1]) &&
        readI2C(REG_FIFO_DATA, &buffer[2])) {
        
        // Combinar los 3 bytes en un valor de 18 bits
        value = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
        value &= 0x3FFFF; // Mantener solo 18 bits
    }
    
    return value;
}

// Función principal
int main() {
    // Inicializar componentes
    CyGlobalIntEnable;
    I2C_1_Start();
    UART_1_Start();
    
    // Esperar estabilización
    CyDelay(1000);
    
    // Header
    sendString("\r\n=== MAX30102 Sensor Simple ===\r\n");
    
    // Verificar y configurar sensor
    if (!checkSensor()) {
        sendString("FALLO: Sensor no detectado\r\n");
        sendString("Verifique conexiones I2C y alimentacion\r\n");
        while(1) {
            CyDelay(1000);
        }
    }
    
    if (!configureSensor()) {
        sendString("FALLO: Error en configuracion\r\n");
        while(1) {
            CyDelay(1000);
        }
    }
    
    // Verificar que los LEDs se enciendan
    sendString("\r\nLEDs deberían estar encendidos ahora...\r\n");
    sendString("Iniciando lectura de datos:\r\n");
    sendString("Formato: RED, IR\r\n\r\n");
    
    // Loop principal de lectura
    while(1) {
        uint32_t redValue, irValue;
        
        // Leer valores (RED primero, luego IR)
        redValue = readFIFO();
        irValue = readFIFO();
        
        // Enviar datos por UART
        sprintf(uartBuffer, "%u, %u\r\n", redValue, irValue);
        sendString(uartBuffer);
        
        // Pequeña pausa
        CyDelay(100);
    }
}